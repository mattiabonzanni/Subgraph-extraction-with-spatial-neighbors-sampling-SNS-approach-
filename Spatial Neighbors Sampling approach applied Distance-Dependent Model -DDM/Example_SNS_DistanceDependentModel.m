%% Generate the distance-dependent model (DDM) with small-world properties
% Given NG nodes, arrange them randomly in a 2D space. The 2D space has x- and y-coordinates range between 0 and 1;
% Assuming an inverse relationship between physical distance and edge strength (Muldoon, 2016), assign edge weights wij according to the euclidian distance dij between all the pairs of nodes as follows: w_ij=D_max-d_ij where Dmax=max{dij}. Each node will have NG-1 connections (except for the ij pair with distance d_ij equal to Dmax);
% Eliminate connections with an edge weight below a weight threshold wt. wt is defined by the user to achive the desired edge density. This step led to the spontaneous emergence of small-world networks;  
% Randomly re-wire each edge with probability beta (edge weight is retained). The inclusion of a random re-wiring guarantees that the network is not solely constructed as a function of physical distance, yet without imposing any additional rule. Moreover, the introduction of the random re-wiring led to a similar profile previously found in Watts et al.,1999. 
% Calculate SWPG, CCG and PLG.
% To apply the SNS method to distance-dependent model (DDM) graphs generated by GenerateDDM.m:
% Fix a spatial parameter rho and a seed node s  of index i(InitalSeedNode);
% Extract all the nodes with x coordinates in the range [xs- rho; xs+ rho] and y coordinates in the range [ys- rho; ys+ rho]. An edge ij is preserved if and only if both nodei and nodej are retained in the subgraph; 
% Calculate SWPS, CCS and PLS of the subgraph created in the previous step;
% Repeat the process from the last two steps with the node of index i+1 until the index of the seed node is equal to LastSeedNode.
    % INPUTS
% NG= number of nodes in the distance-dependent model (DDM) Global Graph;
% edgeDensity= the percentage of NG nodes attached to a given node in the Global graph.  If not specified, 8 is used (She et al., 2016);
% beta= re-wiring probability in the WS Graph. If not specified, 0.05 is used to generate a small world networks. 
% rho= the spatial parameter used to select the subgraph area;
% G= the final DDM Global Graph (generated by GenerateDDM.m) or any other graph;
% rho= the spatial parameter used to select the subgraph area;
% xcoord= a vector composed by the x-coordinates assigned to each node (generated by GenerateDDM.m or associated with the graph G);
% ycoord= a vector composed by the y-coordinates assigned to each node (generated by GenerateDDM.m or associated with the graph G);
% InitialSeedNode= the first node used as seed node for the extraction. If not specified, 1 is assumed as default;
% LastSeedNode= the last node used as seed node for the extraction. If not specified, NG is assumed as default;
    % OUTPUT from GenerateDDM.m:
% 1) G= the final DDM Global Graph;
% 2) MatrixG= the adjacency matrix of graph G;
% 3) xcoord= a vector composed by the random x-coordinates assigned to each node;
% 4) ycoord= a vector composed by the random y-coordinates assigned to each node;
% 5) The following outputs are structured in FinalGlobalGraph Table:
% Degree=degree of the graph G;
% wt=calculated weight thresholdto achieve the desired edge density;
% SWPG=value of SWP of the Global graph 
% RegularCCG= Average Clustering Coef. value of the Lattice model of the Global graph
% NetCCG= Average Clustering Coef. value of the Global graph 
% RandCCG= Average Clustering Coef. value of the Random model of the global graph 
% RegularPLG= Average Path length value of the Lattice model of the Global graph  
% NetPLG= Average Path length value of the Global graph   
% RandPLG= Average Path length value of the Random model of the Global graph   
    %OUTPUT from SNSDNN.m:
% 1) The following values are structured in the FinalSubGraphs table:
% NodeID=the value of the node used as seed node;
% DegreeSubGraph= degree of the subgraph;
% FractionNodeSubGraph= the fraction of nodes exctract in the subgraph;
% SWPS=value of SWP of the Global graph 
% RegularCCS= Average Clustering Coef. values of the Lattice model of the subgraphs 
% NetCCS= Average Clustering Coef. values of the subgraphs 
% RandCCS= Average Clustering Coef. values of the Random model of the subgraphs 
% RegularPLS= Average Path length values of the Lattice model of the subgraphs  
% NetPLS= Average Path length values of the subgraphs   
% RandPLS= Average Path length values of the Random model of the subgraphs
    % Required codes:
% 1) avg_clus_matrix (written by Eric Bridgeford);
% 2) avg_path_matrix (written by Eric Bridgeford);
% 3) clustering_coef_matrix (code originally written by Mika Rubinov,UNSW, 2007-2010 and modified/written by Eric Bridgeford);
% 4) latmio_und_connected (Mika Rubinov, UNSW; Jonathan Power, WUSTL and Olaf Sporns, IU; Brain Connectivity Toolbox);
% 5) randmio_und_connected (Mika Rubinov, UNSW; Jonathan Power, WUSTL and Olaf Sporns, IU; Brain Connectivity Toolbox);

% Written by Mattia Bonzanni and Kimberly M. Bockley
%% Example
clear
clc
NG=50;        
rho=0.4;

[G MatrixG xcoord ycoord FinalGlobalGraph]=GenerateDDM(NG);         % if edgeDensity and beta not decleared, 8 and 0.05 will be use as default values, respectively.    
[FinalSubgraphs]=SNSDDM(G,rho, xcoord, ycoord, NG);                 % if not specified, InitialSeedNode=1 and LasteSeedNode=NG.
